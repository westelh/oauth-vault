# Default values for oauth-vault.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/westelh/oauth-vault
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

volumeMounts:
- name: vault-secrets
  mountPath: /vault/secrets
volumes:
- name: vault-secrets
  emptyDir: {}

nodeSelector: {}

tolerations: []

affinity: {}

oauthVault:
  config:
    path: "/vault/secrets/config.yaml"

vault:
  enabled: true
  container:
    repository: "hashicorp/vault"
    tag: "latest"
    pullPolicy: IfNotPresent
  config: |
    auto_auth {
      method {
        type = "kubernetes"
        config = {
          role = "vault-oauth"
        }
      }
      sink "file" {
        config = {
          path = "/home/vault/sink"
        }
      }
    }

    template {
      source      = "/etc/vault/config.ctmpl"
      destination = "/vault/secrets/config.yaml"
    }

    vault {
      address = "https://vault.example.com:8200"
    }
  templates:
    config.ctmpl: |
      {{- with secret "secret/data/my-app/config" -}}
      ktor:
        application:
          modules: ["dev.westelh.ApplicationKt.module"]
        deployment:
          host: localhost
          port: 8080
      google:
        oauth:
          clientId: {{ .Data.data.client_id }}
          clientSecret: {{ .Data.data.client_secret }}
          callback: "https://ov.vault.example.com:8200/callback"
      vault:
        addr: "https://vault.example.com:8200"
        {{ with secret "/auth/token/create" "" }}
        token: {{ .Auth.ClientToken }}
        {{ end }}
        kv: kv
        jwt:
          issuer: "https://vault.example.com:8200/v1/identity/oidc"
          audience: "xxxxxxxxxxxxx"
      {{- end }}
